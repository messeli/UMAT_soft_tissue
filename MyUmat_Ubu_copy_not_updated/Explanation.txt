=================
INVERSE HYPERBOLIC FUNCTIONS
http://computer-programming-forum.com/49-fortran/7ebc82829d81d040.htm

Here is a summary of the answers I recieved. Thanks to the people who
gave me some good hints.
1 Is there ATANH, ACOSH and ASINH in standard Fortran ?
No.
(The reason is that "they are easily expressed in terms of LOG and SQRT
. With the same reason, it would be possible to remove LOG10, SQRT,
TAN,...)
2 What are the alternaltives ?
2a) To do it yourself using the following formula :
C DEFINITION OF INVERSE HYPERBOLIC FUNCTIONS
      DOUBLE PRECISION X
      DOUBLE PRECISION ATANH
      DOUBLE PRECISION ASINH
      DOUBLE PRECISION ACOSH
      ATANH(X)=LOG((X+1.)/(-X+1.))/2
      ASINH(X)=LOG(X+SQRT(X**2+1.))
      ACOSH(X)=LOG(X+SQRT((X-1.)*(X+1.)))
(one can put the previous 'statement functions' in a file, include it
with INCLUDE and next, use the functions as if they were intrinsic (but
without genericity))
2b) if you need something more robust which gives you explicit messages
in case of "out of domain" arguments, look at http://gams.nist.gov/
where good versions are (freely) provided.
Arnaud Desitter

=RESPONSE by Van Snyder
These formulations, although mathematically correct, have accuracy problems
near X == 1.
We use
asinh(x) = sgn(x) ln(|x| + sqrt(x^2 + 1))     all x
acosh(x) = ln(x + sqrt(x^2-1))                x >= 1
atanh(x) = 1/2 sgn(x) ln((1+|x|)/(1-|x|))     |x| < 1
[ sgn(x) = -1 for x < 0, 0 for x == 0, +1 for x > 0. ]
To avoid unnecessary loss of relative accuracy as function values approach
zero, a different method is used whenever the argument of the logarithm function
would be in the range [1.0, 2.718].  In this range the argument for atanh is
converted to an argument for asinh, and asinh is computed by argument reduction
to the interval [0.0, 0.125326] followed by evaluation of its Taylor series.
The number of terms depends on the precision of the underlying arithmetic
(gotten from EPSILON in Fortran 90).
For large arguments the formulas involving x^2 are re-formulated to avoid
unnecessary overflow.  Specifically, when x > 10^16 it is presumed that x^2 +/- 1
will not be distinguishable from x^2, and thys the formulas given above for
asinh and acosh are replaced by
asinh(x) = sgn(x) [ ln(2) + ln(|x|) ]
acosh(x) = ln(2) + ln(x)
[ We really should change this to x > sqrt(1 / \rho). ]
Let \Omega denote the machine overflow limit and \rho denote the difference
between 1.0 and the next smaller machine number.  Define a = 1/2 ln (2 / \rho)
and b = ln(2 \Omega).  Then the ranges of the computed values are
|asinh(x)| < b
0 <= acosh(x) < b
|atahn(x)| <= a
|> 2b) if you need something more robust which gives you explicit messages
|> in case of "out of domain" arguments, look at http://gams.nist.gov/
|> where good versions are (freely) provided.
A good idea.


================
3x3 MARTIX INVERSION 
REF http://fortranwiki.org/fortran/show/Matrix+inversion

  pure function matinv3(A) result(B)
    !! Performs a direct calculation of the inverse of a 3Ã—3 matrix.
    complex(wp), intent(in) :: A(3,3)   !! Matrix
    complex(wp)             :: B(3,3)   !! Inverse matrix
    complex(wp)             :: detinv

    ! Calculate the inverse determinant of the matrix
    detinv = 1/(A(1,1)*A(2,2)*A(3,3) - A(1,1)*A(2,3)*A(3,2)&
              - A(1,2)*A(2,1)*A(3,3) + A(1,2)*A(2,3)*A(3,1)&
              + A(1,3)*A(2,1)*A(3,2) - A(1,3)*A(2,2)*A(3,1))

    ! Calculate the inverse of the matrix
    B(1,1) = +detinv * (A(2,2)*A(3,3) - A(2,3)*A(3,2))
    B(2,1) = -detinv * (A(2,1)*A(3,3) - A(2,3)*A(3,1))
    B(3,1) = +detinv * (A(2,1)*A(3,2) - A(2,2)*A(3,1))
    B(1,2) = -detinv * (A(1,2)*A(3,3) - A(1,3)*A(3,2))
    B(2,2) = +detinv * (A(1,1)*A(3,3) - A(1,3)*A(3,1))
    B(3,2) = -detinv * (A(1,1)*A(3,2) - A(1,2)*A(3,1))
    B(1,3) = +detinv * (A(1,2)*A(2,3) - A(1,3)*A(2,2))
    B(2,3) = -detinv * (A(1,1)*A(2,3) - A(1,3)*A(2,1))
    B(3,3) = +detinv * (A(1,1)*A(2,2) - A(1,2)*A(2,1))
  end function
